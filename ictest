#!/bin/bash

usage_msg="Usage: ictest [generate|run|coverage|stat] TESTS"

showhelp() {
cat << EOF
$usage_msg

generate TESTS  : Generate tests from zex.txt files.
run [syn] TESTS : Run tests and report results.
coverage TESTS  : Report combined test coverage.
stat TESTS      : Print short test sanity checks.
EOF

   exit 0
}

usage() {
    echo "$usage_msg" 1>&2
    exit 1
}

warn() {
    echo "WARNING: $1" 1>&2
}

checktests() {
    for testdir in "$1"
    do
        if [ ! -d "$testdir" ]; then
            echo "Not a directory: '$testdir'" 1>&2
            usage
        fi
    done
}

expandbase()
{
    abspath="$(readlink -f "$1")"
    echo "$(basename "$abspath")"
}

assert_file() {
    dots='......................... '
    printf "%s %s" $2 "${dots:${#2}}"
    if [ ! -f "$1/$2" ]; then
       printf "\033[0;31mMISSING\033[0m\n"
    else
       printf "\033[0;32mOK\033[0m\n"
    fi
}

if [ "$#" -le 1 ]; then
    if [ "$1" = "--help" ]; then
        showhelp
    else
        usage
    fi
fi

case $1 in
"generate")
    targets="${@:2}"

    checktests $targets

    for testdir in $targets
    do
        testname="$(expandbase "$testdir")"

        echo "Generating testcase $testname ..."
        (cd "$testdir"; ictest_generate)
    done
    ;;

"run")
    runtype=1
    targets="${@:2}"

    if [ "$#" -ge 2 ]; then
        if [ "$2" = "syn" ]; then
            runtype=2
            targets="${@:3}"
        elif [ "$2" = "lay" ]; then
            runtype=3
            targets="${@:3}"
        fi
    fi

    checktests $targets

    for testdir in $targets
    do
        testname="$(expandbase "$testdir")"

        printf "\n=== Executing testcase $testname ===\n"
        if [ ! -f "$testdir/testcase.v" ]; then
            warn "No testcase source file found, skipping testcase"
            continue
        fi

        echo "Generating makefile"
        (cd "$testdir"; echo "$runtype" | icncsim makefile 2>&1 > /dev/null | tee /dev/tty | grep -q ERROR)
        if [ $? -eq 0 ]; then
            warn "Makefile generation failed, check logfile"
            continue
        fi

        echo "Running simulation"
        (cd "$testdir"; icncsim runBatch 2>&1 | ictest_parse_ncsim)
    done

    echo ""
    ;;

"coverage")
    targets="${@:2}"

    checktests $targets

    ictest_coverage $targets
    ;;

"stat")
    targets="${@:2}"

    checktests $targets

    for testdir in $targets
    do
        testname="$(expandbase "$testdir")"
        echo "Testcase $testname:"

        assert_file $testdir "zex.txt"

        printf "testcase.v ............... "
        if [ ! -f "$testdir/testcase.v" ]; then
           printf "\033[0;31mMISSING\033[0m\n"
        elif [[ ! $(tac "$testdir/testcase.v") =~ ^unit.finish ]]; then
           printf "\033[0;31mINCOMPLETE\033[0m\n"
        else
           ntests_tc=$(grep -Po "// BEGIN TESTCASE #\K\d+" "$testdir/testcase.v" | tail -1)
           printf "\033[0;32mOK\033[0m ($((ntests_tc+1)) tests)\n"
        fi

        printf "progmem.txt .............. "
        if [ ! -f "$testdir/progmem.txt" ]; then
           printf "\033[0;31mMISSING\033[0m\n"
        else
           ntests_pmem=$(grep -Po "// BEGIN TESTCASE #\K\d+" "$testdir/progmem.txt" | tail -1)
           printf "\033[0;32mOK\033[0m ($((ntests_pmem+1)) tests)\n"
        fi

        assert_file $testdir "datamem_int1.txt"
        assert_file $testdir "datamem_int2.txt"
        assert_file $testdir "datamem_ext.txt"
        assert_file $testdir "iomem.txt"

        if [ ! -z "$ntests_tc" ]; then
            if [ ! -z "$ntests_pmem" ] && [ "$ntests_tc" -ne "$ntests_pmem" ]; then
                printf "==> \033[0;31mTEST NUMBER MISMATCH, NEEDS UPDATE\033[0m\n"
            fi
        fi
    done
    ;;

*)
    echo "Unknown option '$1'" 1>&2
    usage
    ;;
esac
